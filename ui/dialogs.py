"""
–î–∏–∞–ª–æ–≥–æ–≤—ã–µ –æ–∫–Ω–∞ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
"""

import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import threading
from typing import List, Tuple
import os
import logging

from config import FONTS, COLORS, MAX_SELECTED_FOLDERS

logger = logging.getLogger(__name__)


class PhotoPreviewDialog:
    """–î–∏–∞–ª–æ–≥ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π."""
    
    def __init__(self, parent, organization: dict, destination_dir: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏–∞–ª–æ–≥–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞.
        
        Args:
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ
            organization: –°–ª–æ–≤–∞—Ä—å —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π —Ñ–∞–π–ª–æ–≤ –ø–æ –ø–∞–ø–∫–∞–º
            destination_dir: –¶–µ–ª–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
        """
        self.parent = parent
        self.organization = organization
        self.destination_dir = destination_dir
        self.confirmed = False
        
        self.window = tk.Toplevel(parent)
        self.window.title("–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        self.window.geometry("700x600")  # –£–≤–µ–ª–∏—á–∏–ª–∏ —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
        self.window.transient(parent)
        self.window.grab_set()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
        self.window.minsize(600, 500)
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
        self.window.geometry("+{}+{}".format(
            parent.winfo_rootx() + 50,
            parent.winfo_rooty() + 30
        ))
        
        self._setup_ui()
    
    def _setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–∏–∞–ª–æ–≥–∞."""
        # –û—Å–Ω–æ–≤–Ω–∞—è —Ä–∞–º–∫–∞
        main_frame = ttk.Frame(self.window, padding="20")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(
            main_frame,
            text="–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π",
            font=FONTS['header']
        )
        title_label.pack(pady=(0, 10))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–ª–µ–≤–æ–π –ø–∞–ø–∫–µ
        dest_frame = ttk.Frame(main_frame)
        dest_frame.pack(fill=tk.X, pady=(0, 15))
        
        ttk.Label(dest_frame, text="–ü–∞–ø–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:", font=FONTS['default']).pack(anchor=tk.W)
        ttk.Label(dest_frame, text=self.destination_dir, font=FONTS['small'], 
                 foreground=COLORS['text_secondary']).pack(anchor=tk.W, padx=(20, 0))
        
        # –°–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫ –∏ —Ñ–∞–π–ª–æ–≤
        tree_frame = ttk.Frame(main_frame)
        tree_frame.pack(fill=tk.BOTH, expand=True, pady=(0, 20))
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        tree_scroll = ttk.Scrollbar(tree_frame)
        tree_scroll.pack(side=tk.RIGHT, fill=tk.Y)
        
        self.tree = ttk.Treeview(tree_frame, yscrollcommand=tree_scroll.set)
        tree_scroll.config(command=self.tree.yview)
        self.tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        self.tree["columns"] = ("count",)
        self.tree.column("#0", width=300, minwidth=200)
        self.tree.column("count", width=100, minwidth=80)
        self.tree.heading("#0", text="–ü–∞–ø–∫–∞/–§–∞–π–ª", anchor=tk.W)
        self.tree.heading("count", text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", anchor=tk.CENTER)
        
        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞
        self._populate_tree()
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –ø–µ—Ä–µ–¥ –∫–Ω–æ–ø–∫–∞–º–∏
        separator = ttk.Separator(main_frame, orient='horizontal')
        separator.pack(fill=tk.X, pady=(10, 10))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        info_frame = ttk.Frame(main_frame)
        info_frame.pack(fill=tk.X, pady=(0, 10))
        
        total_files = sum(len(files) for files in self.organization.values())
        info_text = f"–ë—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {total_files} —Ñ–∞–π–ª–æ–≤ –≤ {len(self.organization)} –ø–∞–ø–æ–∫"
        ttk.Label(
            info_frame, 
            text=info_text, 
            font=FONTS.get('default', ('Arial', 10)),
            foreground=COLORS.get('text_primary', 'black')
        ).pack()
        
        # –ö–Ω–æ–ø–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ä–∞–º–∫–µ —Å —è–≤–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
        buttons_frame = ttk.Frame(main_frame)
        buttons_frame.pack(fill=tk.X, pady=(0, 10))
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
        cancel_button = ttk.Button(
            buttons_frame,
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            command=self._on_cancel,
            width=15
        )
        cancel_button.pack(side=tk.RIGHT, padx=(10, 0))
        
        confirm_button = ttk.Button(
            buttons_frame,
            text="‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
            command=self._on_confirm,
            width=15
        )
        confirm_button.pack(side=tk.RIGHT)
        
        # –î–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" –∫–Ω–æ–ø–∫–æ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        confirm_button.focus_set()
        self.window.bind('<Return>', lambda e: self._on_confirm())
        self.window.bind('<Escape>', lambda e: self._on_cancel())
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
        self.window.protocol("WM_DELETE_WINDOW", self._on_cancel)
    
    def _populate_tree(self):
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤."""
        total_files = 0
        
        for folder, files in sorted(self.organization.items()):
            total_files += len(files)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–ø–∫—É
            folder_item = self.tree.insert("", tk.END, text=f"üìÅ {folder}", values=(f"{len(files)} —Ñ–∞–π–ª–æ–≤",))
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫—É (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞)
            for i, filename in enumerate(files[:10]):
                self.tree.insert(folder_item, tk.END, text=f"  üì∑ {filename}", values=("",))
            
            if len(files) > 10:
                self.tree.insert(folder_item, tk.END, text=f"  ... –∏ –µ—â–µ {len(files) - 10} —Ñ–∞–π–ª–æ–≤", values=("",))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –Ω–∞—á–∞–ª–æ
        summary_item = self.tree.insert("", 0, text="üìä –°–≤–æ–¥–∫–∞", values=(f"{total_files} —Ñ–∞–π–ª–æ–≤",))
        self.tree.insert(summary_item, tk.END, text=f"  –í—Å–µ–≥–æ –ø–∞–ø–æ–∫: {len(self.organization)}", values=("",))
        self.tree.insert(summary_item, tk.END, text=f"  –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {total_files}", values=("",))
        
        # –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Å–≤–æ–¥–∫—É
        self.tree.item(summary_item, open=True)
    
    def _on_confirm(self):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏."""
        logger.info("PhotoPreviewDialog: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ–ø–µ—Ä–∞—Ü–∏—é")
        print("DEBUG: PhotoPreviewDialog - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏")
        self.confirmed = True
        self.window.destroy()
    
    def _on_cancel(self):
        """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏."""
        logger.info("PhotoPreviewDialog: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –æ–ø–µ—Ä–∞—Ü–∏—é")
        print("DEBUG: PhotoPreviewDialog - –æ—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏")
        self.confirmed = False
        self.window.destroy()
    
    def show_modal(self) -> bool:
        """
        –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ.
        
        Returns:
            bool: True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ–ø–µ—Ä–∞—Ü–∏—é
        """
        self.window.wait_window()
        return self.confirmed


class MultipleFolderSelector:
    """–î–∏–∞–ª–æ–≥ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏."""
    
    def __init__(self, parent, initial_folders: List[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –ø–∞–ø–æ–∫.
        
        Args:
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ
            initial_folders: –°–ø–∏—Å–æ–∫ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫
        """
        self.parent = parent
        self.selected_folders = initial_folders.copy() if initial_folders else []
        self.folder_stats = {}  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–∞–ø–∫–∞–º {path: count}
        self.recursive = True
        self.confirmed = False
        
        self.window = tk.Toplevel(parent)
        self.window.title("–í—ã–±–æ—Ä –ø–∞–ø–æ–∫ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏")
        self.window.geometry("800x650")  # –£–≤–µ–ª–∏—á–∏–ª–∏ —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
        self.window.transient(parent)
        self.window.grab_set()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
        self.window.minsize(700, 550)
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
        self.window.geometry("+{}+{}".format(
            parent.winfo_rootx() + 30,
            parent.winfo_rooty() + 30
        ))
        
        self._setup_ui()
        self._update_stats()
    
    def _setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–∏–∞–ª–æ–≥–∞."""
        # –û—Å–Ω–æ–≤–Ω–∞—è —Ä–∞–º–∫–∞
        main_frame = ttk.Frame(self.window, padding="10")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(
            main_frame, 
            text="–í—ã–±–æ—Ä –ø–∞–ø–æ–∫ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏",
            font=FONTS['header']
        )
        title_label.pack(pady=(0, 10))
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        button_frame = ttk.Frame(main_frame)
        button_frame.pack(fill=tk.X, pady=(0, 10))
        
        ttk.Button(
            button_frame,
            text="–î–æ–±–∞–≤–∏—Ç—å –ø–∞–ø–∫—É",
            command=self._add_folder
        ).pack(side=tk.LEFT, padx=(0, 5))
        
        ttk.Button(
            button_frame,
            text="–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ",
            command=self._clear_all_folders
        ).pack(side=tk.LEFT, padx=(0, 5))
        
        # –°–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫
        list_label = ttk.Label(main_frame, text="–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞–ø–∫–∏:")
        list_label.pack(anchor=tk.W, pady=(0, 5))
        
        # –§—Ä–µ–π–º –¥–ª—è —Å–ø–∏—Å–∫–∞ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        list_frame = ttk.Frame(main_frame)
        list_frame.pack(fill=tk.BOTH, expand=True, pady=(0, 10))
        
        # Treeview –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–∞–ø–æ–∫
        columns = ('path', 'count', 'status')
        self.folders_tree = ttk.Treeview(
            list_frame,
            columns=columns,
            show='tree headings',
            height=12
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        self.folders_tree.heading('#0', text='‚òë')
        self.folders_tree.heading('path', text='–ü—É—Ç—å –∫ –ø–∞–ø–∫–µ')
        self.folders_tree.heading('count', text='–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π')
        self.folders_tree.heading('status', text='–°—Ç–∞—Ç—É—Å')
        
        self.folders_tree.column('#0', width=30, minwidth=30)
        self.folders_tree.column('path', width=350, minwidth=200)
        self.folders_tree.column('count', width=100, minwidth=80)
        self.folders_tree.column('status', width=100, minwidth=80)
        
        # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞
        scrollbar = ttk.Scrollbar(list_frame, orient=tk.VERTICAL, command=self.folders_tree.yview)
        self.folders_tree.configure(yscrollcommand=scrollbar.set)
        
        self.folders_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # –ü—Ä–∏–≤—è–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π
        self.folders_tree.bind('<Button-3>', self._on_right_click)
        self.folders_tree.bind('<Delete>', self._on_delete_key)
        self.folders_tree.bind('<Double-Button-1>', self._on_double_click)
        
        # –ß–µ–∫–±–æ–∫—Å –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
        recursive_frame = ttk.Frame(main_frame)
        recursive_frame.pack(fill=tk.X, pady=(0, 10))
        
        self.recursive_var = tk.BooleanVar(value=self.recursive)
        recursive_check = ttk.Checkbutton(
            recursive_frame,
            text="–í–∫–ª—é—á–∞—Ç—å –ø–æ–¥–ø–∞–ø–∫–∏",
            variable=self.recursive_var,
            command=self._on_recursive_changed
        )
        recursive_check.pack(side=tk.LEFT)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_frame = ttk.Frame(main_frame)
        stats_frame.pack(fill=tk.X, pady=(0, 10))
        
        self.stats_label = ttk.Label(
            stats_frame,
            text="–í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: 0",
            font=FONTS['default']
        )
        self.stats_label.pack(side=tk.LEFT)
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –ø–µ—Ä–µ–¥ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
        separator = ttk.Separator(main_frame, orient='horizontal')
        separator.pack(fill=tk.X, pady=(15, 10))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–µ—Ä–µ–¥ –∫–Ω–æ–ø–∫–∞–º–∏
        info_frame = ttk.Frame(main_frame)
        info_frame.pack(fill=tk.X, pady=(0, 10))
        
        info_text = f"–í—ã–±—Ä–∞–Ω–æ –ø–∞–ø–æ–∫: {len(self.selected_folders)}"
        self.info_label = ttk.Label(
            info_frame,
            text=info_text,
            font=FONTS.get('default', ('Arial', 10)),
            foreground=COLORS.get('text_primary', 'black')
        )
        self.info_label.pack()
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        action_frame = ttk.Frame(main_frame)
        action_frame.pack(fill=tk.X, pady=(0, 10))
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º –∏ –∏–∫–æ–Ω–∫–∞–º–∏
        cancel_button = ttk.Button(
            action_frame,
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            command=self._on_cancel,
            width=15
        )
        cancel_button.pack(side=tk.RIGHT, padx=(10, 0))
        
        confirm_button = ttk.Button(
            action_frame,
            text="üîç –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω–¥–µ–∫—Å",
            command=self._on_confirm,
            width=20
        )
        confirm_button.pack(side=tk.RIGHT)
        
        # –î–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω–¥–µ–∫—Å" –∫–Ω–æ–ø–∫–æ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        confirm_button.focus_set()
        self.window.bind('<Return>', lambda e: self._on_confirm())
        self.window.bind('<Escape>', lambda e: self._on_cancel())
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
        self.context_menu = tk.Menu(self.window, tearoff=0)
        self.context_menu.add_command(label="–£–¥–∞–ª–∏—Ç—å", command=self._remove_selected_folder)
        self.context_menu.add_command(label="–û—Ç–∫—Ä—ã—Ç—å –≤ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–µ", command=self._open_in_explorer)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
        self.window.protocol("WM_DELETE_WINDOW", self._on_cancel)
    
    def _add_folder(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø–∞–ø–∫–∏."""
        if len(self.selected_folders) >= MAX_SELECTED_FOLDERS:
            messagebox.showwarning(
                "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–ø–æ–∫: {MAX_SELECTED_FOLDERS}"
            )
            return
        
        directory = filedialog.askdirectory(
            title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏",
            parent=self.window
        )
        
        if directory and directory not in self.selected_folders:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –ø–∞–ø–∫–∏
            is_nested = False
            folders_to_remove = []
            
            for existing_folder in self.selected_folders:
                if directory.startswith(existing_folder + os.sep):
                    messagebox.showinfo(
                        "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                        f"–ü–∞–ø–∫–∞ —É–∂–µ –≤–∫–ª—é—á–µ–Ω–∞ –≤: {existing_folder}"
                    )
                    is_nested = True
                    break
                elif existing_folder.startswith(directory + os.sep):
                    folders_to_remove.append(existing_folder)
            
            if not is_nested:
                # –£–¥–∞–ª—è–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –ø–∞–ø–∫–∏
                for folder in folders_to_remove:
                    self.selected_folders.remove(folder)
                
                self.selected_folders.append(directory)
                self._refresh_folder_list()
                self._update_stats()
    
    def _clear_all_folders(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫."""
        if self.selected_folders and messagebox.askyesno(
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", 
            "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞–ø–∫–∏?"
        ):
            self.selected_folders.clear()
            self.folder_stats.clear()
            self._refresh_folder_list()
            self._update_stats()
    
    def _refresh_folder_list(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞–ø–æ–∫ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ."""
        # –û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞
        for item in self.folders_tree.get_children():
            self.folders_tree.delete(item)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞–ø–æ–∫
        for folder_path in self.selected_folders:
            count = self.folder_stats.get(folder_path, "...")
            status = "–ì–æ—Ç–æ–≤–∞" if count != "..." else "–ü–æ–¥—Å—á–µ—Ç..."
            
            self.folders_tree.insert(
                '',
                'end',
                text='‚òë',
                values=(folder_path, count, status)
            )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
        if hasattr(self, 'info_label'):
            self.info_label.config(text=f"–í—ã–±—Ä–∞–Ω–æ –ø–∞–ø–æ–∫: {len(self.selected_folders)}")
    
    def _update_stats(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø–∞–ø–∫–∞–º."""
        def count_worker():
            from file_scanner import FileScanner
            scanner = FileScanner()
            
            total_images = 0
            for folder_path in self.selected_folders:
                try:
                    if os.path.exists(folder_path):
                        files = scanner.scan_directory(
                            folder_path, 
                            recursive=self.recursive_var.get()
                        )
                        count = len(files)
                        self.folder_stats[folder_path] = count
                        total_images += count
                    else:
                        self.folder_stats[folder_path] = "–ù–µ –Ω–∞–π–¥–µ–Ω–∞"
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ —Ñ–∞–π–ª–æ–≤ –≤ {folder_path}: {e}")
                    self.folder_stats[folder_path] = "–û—à–∏–±–∫–∞"
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.window.after(0, self._on_stats_updated, total_images)
        
        if self.selected_folders:
            threading.Thread(target=count_worker, daemon=True).start()
        else:
            self._on_stats_updated(0)
    
    def _on_stats_updated(self, total_images: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        self.stats_label.config(text=f"–í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {total_images:,}")
        self._refresh_folder_list()
    
    def _on_recursive_changed(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞."""
        self.recursive = self.recursive_var.get()
        if self.selected_folders:
            self._update_stats()
    
    def _on_right_click(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∞–≤–æ–≥–æ –∫–ª–∏–∫–∞."""
        item = self.folders_tree.identify_row(event.y)
        if item:
            self.folders_tree.selection_set(item)
            self.context_menu.post(event.x_root, event.y_root)
    
    def _on_delete_key(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à–∏ Delete."""
        self._remove_selected_folder()
    
    def _on_double_click(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞."""
        self._open_in_explorer()
    
    def _remove_selected_folder(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏."""
        selection = self.folders_tree.selection()
        if selection:
            item = selection[0]
            values = self.folders_tree.item(item, 'values')
            folder_path = values[0]
            
            if folder_path in self.selected_folders:
                self.selected_folders.remove(folder_path)
                if folder_path in self.folder_stats:
                    del self.folder_stats[folder_path]
                self._refresh_folder_list()
                self._update_stats()
    
    def _open_in_explorer(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –ø–∞–ø–∫–∏ –≤ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–µ."""
        selection = self.folders_tree.selection()
        if selection:
            item = selection[0]
            values = self.folders_tree.item(item, 'values')
            folder_path = values[0]
            
            if os.path.exists(folder_path):
                os.startfile(folder_path)
    
    def _on_confirm(self):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–æ–∫."""
        logger.info(f"MultipleFolderSelector: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤—ã–±–æ—Ä {len(self.selected_folders)} –ø–∞–ø–æ–∫")
        print(f"DEBUG: MultipleFolderSelector - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ {len(self.selected_folders)} –ø–∞–ø–æ–∫")
        
        if not self.selected_folders:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø–∞–ø–∫—É")
            return
        
        self.recursive = self.recursive_var.get()
        self.confirmed = True
        self.window.destroy()
    
    def _on_cancel(self):
        """–û—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–æ–∫."""
        logger.info("MultipleFolderSelector: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –≤—ã–±–æ—Ä –ø–∞–ø–æ–∫")
        print("DEBUG: MultipleFolderSelector - –æ—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–æ–∫")
        self.confirmed = False
        self.window.destroy()
    
    def show_modal(self) -> Tuple[bool, List[str], bool]:
        """
        –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ.
        
        Returns:
            Tuple[bool, List[str], bool]: (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ, —Å–ø–∏—Å–æ–∫_–ø–∞–ø–æ–∫, —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π_–ø–æ–∏—Å–∫)
        """
        self.window.wait_window()
        return self.confirmed, self.selected_folders, self.recursive
