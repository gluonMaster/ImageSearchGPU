#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã –¥–ª—è Image Search Application.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ –¥–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.
"""

import sys
import os
import platform
import subprocess
from pathlib import Path

def print_header(title):
    """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ä–∞–∑–¥–µ–ª–∞."""
    print(f"\n{'='*60}")
    print(f"  {title}")
    print('='*60)

def print_section(title):
    """–ü–µ—á–∞—Ç—å –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞."""
    print(f"\n--- {title} ---")

def check_system_info():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ."""
    print_header("–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ò–°–¢–ï–ú–ï")
    
    print(f"–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: {platform.system()} {platform.release()}")
    print(f"–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {platform.machine()}")
    print(f"–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: {platform.processor()}")
    print(f"Python –≤–µ—Ä—Å–∏—è: {sys.version}")
    print(f"Python –ø—É—Ç—å: {sys.executable}")

def check_python_environment():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Python –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    print_header("PYTHON –û–ö–†–£–ñ–ï–ù–ò–ï")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if hasattr(sys, 'real_prefix') or (hasattr(sys, 'base_prefix') and sys.base_prefix != sys.prefix):
        print("‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: –ê–∫—Ç–∏–≤–Ω–æ")
        print(f"   –ü—É—Ç—å: {sys.prefix}")
    else:
        print("‚ö†Ô∏è  –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: –ù–µ –∞–∫—Ç–∏–≤–Ω–æ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≥–ª–æ–±–∞–ª—å–Ω–æ–µ)")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ pip
    try:
        import pip
        print(f"‚úÖ pip –≤–µ—Ä—Å–∏—è: {pip.__version__}")
    except ImportError:
        print("‚ùå pip –Ω–µ –Ω–∞–π–¥–µ–Ω")

def check_memory():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏ —Å–∏—Å—Ç–µ–º—ã."""
    print_header("–ü–ê–ú–Ø–¢–¨ –°–ò–°–¢–ï–ú–´")
    
    try:
        import psutil
        memory = psutil.virtual_memory()
        
        print(f"–û–±—â–∞—è –ø–∞–º—è—Ç—å: {memory.total / (1024**3):.1f} –ì–ë")
        print(f"–î–æ—Å—Ç—É–ø–Ω–∞—è –ø–∞–º—è—Ç—å: {memory.available / (1024**3):.1f} –ì–ë")
        print(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {memory.percent:.1f}%")
        print(f"–°–≤–æ–±–æ–¥–Ω–æ: {memory.free / (1024**3):.1f} –ì–ë")
        
        # –û—Ü–µ–Ω–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ –ø–∞–º—è—Ç–∏
        available_gb = memory.available / (1024**3)
        if available_gb >= 6:
            print("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞–º—è—Ç–∏ –¥–ª—è –±–æ–ª—å—à–∏—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π (70k+ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)")
        elif available_gb >= 4:
            print("‚úÖ –•–æ—Ä–æ—à–æ! –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Å—Ä–µ–¥–Ω–∏—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π (–¥–æ 25k –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)")
        elif available_gb >= 2:
            print("‚ö†Ô∏è  –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ. –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π (–¥–æ 8k –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)")
        else:
            print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞–º—è—Ç–∏. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Å–≤–æ–±–æ–¥–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã")
            
    except ImportError:
        print("‚ùå psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞–º—è—Ç—å")

def check_gpu():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ GPU –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π."""
    print_header("GPU –í–û–ó–ú–û–ñ–ù–û–°–¢–ò")
    
    try:
        import torch
        print(f"PyTorch –≤–µ—Ä—Å–∏—è: {torch.__version__}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ CUDA
        cuda_available = torch.cuda.is_available()
        print(f"CUDA –¥–æ—Å—Ç—É–ø–Ω–∞: {'‚úÖ –î–∞' if cuda_available else '‚ùå –ù–µ—Ç'}")
        
        if cuda_available:
            device_count = torch.cuda.device_count()
            print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ GPU —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {device_count}")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–∂–¥–æ–º GPU
            for i in range(device_count):
                gpu_name = torch.cuda.get_device_name(i)
                props = torch.cuda.get_device_properties(i)
                memory_gb = props.total_memory / (1024**3)
                compute_capability = f"{props.major}.{props.minor}"
                
                print(f"\nGPU {i}: {gpu_name}")
                print(f"   –ü–∞–º—è—Ç—å: {memory_gb:.1f} –ì–ë")
                print(f"   Compute Capability: {compute_capability}")
                
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–∞—Ä—Ç
                if "2060" in gpu_name:
                    print("   üéØ RTX 2060 - –æ—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è!")
                elif "3060" in gpu_name or "3070" in gpu_name or "3080" in gpu_name or "3090" in gpu_name:
                    print("   üöÄ RTX 30xx - –≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å!")
                elif "4060" in gpu_name or "4070" in gpu_name or "4080" in gpu_name or "4090" in gpu_name:
                    print("   üî• RTX 40xx - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å!")
                elif "GTX" in gpu_name:
                    print("   ‚úÖ GTX –∫–∞—Ä—Ç–∞ - —Ö–æ—Ä–æ—à–µ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ")
                    
            print(f"\nCUDA –≤–µ—Ä—Å–∏—è PyTorch: {torch.version.cuda}")
            
            # –¢–µ—Å—Ç GPU
            try:
                test_tensor = torch.randn(100, 100).cuda()
                print("‚úÖ GPU —Ç–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                print(f"‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º–∞ —Å GPU —Ç–µ—Å—Ç–æ–º: {e}")
                
        else:
            print("\n–ìPU –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –∏–ª–∏ CUDA –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
            print("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ CPU —Ä–µ–∂–∏–º–µ (–º–µ–¥–ª–µ–Ω–Ω–µ–µ).")
            
    except ImportError:
        print("‚ùå PyTorch –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def check_required_packages():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤."""
    print_header("–ü–†–û–í–ï–†–ö–ê –ü–ê–ö–ï–¢–û–í")
    
    required_packages = {
        'torch': 'PyTorch - –æ—Å–Ω–æ–≤–∞ –¥–ª—è –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π',
        'torchvision': 'Torchvision - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
        'sentence_transformers': 'Sentence Transformers - CLIP –º–æ–¥–µ–ª–∏',
        'PIL': 'Pillow - —Ä–∞–±–æ—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏',
        'numpy': 'NumPy - —á–∏—Å–ª–µ–Ω–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è',
        'psutil': 'PSUtil - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã',
        'tkinter': 'Tkinter - –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å'
    }
    
    missing_packages = []
    
    for package, description in required_packages.items():
        try:
            if package == 'PIL':
                import PIL
                version = PIL.__version__
            else:
                module = __import__(package)
                version = getattr(module, '__version__', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            
            print(f"‚úÖ {package} ({version}) - {description}")
            
        except ImportError:
            print(f"‚ùå {package} - –û–¢–°–£–¢–°–¢–í–£–ï–¢ - {description}")
            missing_packages.append(package)
    
    if missing_packages:
        print(f"\n‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–∞–∫–µ—Ç—ã: {', '.join(missing_packages)}")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ install.bat –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
    else:
        print("\n‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")

def check_application_files():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    print_header("–§–ê–ô–õ–´ –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø")
    
    required_files = {
        'main.py': '–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
        'search_engine.py': '–ü–æ–∏—Å–∫–æ–≤—ã–π –¥–≤–∏–∂–æ–∫',
        'image_analyzer.py': '–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
        'cache_manager.py': '–ú–µ–Ω–µ–¥–∂–µ—Ä –∫—ç—à–∞',
        'file_scanner.py': '–°–∫–∞–Ω–µ—Ä —Ñ–∞–π–ª–æ–≤',
        'gui_components.py': '–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞',
        'config.py': '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è',
        'requirements.txt': '–°–ø–∏—Å–æ–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π'
    }
    
    missing_files = []
    
    for filename, description in required_files.items():
        if Path(filename).exists():
            print(f"‚úÖ {filename} - {description}")
        else:
            print(f"‚ùå {filename} - –û–¢–°–£–¢–°–¢–í–£–ï–¢ - {description}")
            missing_files.append(filename)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–ø–∫–∏ cache
    if Path('cache').exists():
        print("‚úÖ cache/ - –ø–∞–ø–∫–∞ –¥–ª—è –∫—ç—à–∞")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
        cache_files = list(Path('cache').glob('*.pkl'))
        if cache_files:
            total_size = sum(f.stat().st_size for f in cache_files)
            print(f"   –§–∞–π–ª–æ–≤ –∫—ç—à–∞: {len(cache_files)}")
            print(f"   –†–∞–∑–º–µ—Ä –∫—ç—à–∞: {total_size / (1024*1024):.1f} –ú–ë")
        else:
            print("   –ö—ç—à –ø—É—Å—Ç (–ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫)")
    else:
        print("‚ö†Ô∏è  cache/ - –ø–∞–ø–∫–∞ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ")
    
    if missing_files:
        print(f"\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã: {', '.join(missing_files)}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã")
    else:
        print("\n‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –º–µ—Å—Ç–µ!")

def check_performance_settings():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
    print_header("–ù–ê–°–¢–†–û–ô–ö–ò –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        sys.path.insert(0, '.')
        import config
        
        print(f"–†–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞: {getattr(config, 'CHUNK_SIZE', '–Ω–µ –∑–∞–¥–∞–Ω')}")
        print(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å: {getattr(config, 'MIN_MEMORY_GB', '–Ω–µ –∑–∞–¥–∞–Ω–∞')} –ì–ë")
        print(f"–ü–æ—Ä–æ–≥ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {getattr(config, 'WARNING_MEMORY_GB', '–Ω–µ –∑–∞–¥–∞–Ω')} –ì–ë")
        print(f"–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ CLIP: {getattr(config, 'CLIP_BATCH_SIZE', '–Ω–µ –∑–∞–¥–∞–Ω')}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        try:
            import psutil
            available_gb = psutil.virtual_memory().available / (1024**3)
            chunk_size = getattr(config, 'CHUNK_SIZE', 5000)
            
            if available_gb < 4 and chunk_size > 3000:
                print("\n‚ö†Ô∏è  –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –£–º–µ–Ω—å—à–∏—Ç–µ CHUNK_SIZE –¥–æ 2000-3000 –¥–ª—è –≤–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã")
            elif available_gb >= 8 and chunk_size < 5000:
                print("\n‚úÖ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –ú–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å CHUNK_SIZE –¥–æ 7000-8000 –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
            else:
                print("\n‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã –¥–ª—è –≤–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã")
                
        except:
            pass
            
    except ImportError:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å config.py")

def performance_recommendations():
    """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
    print_header("–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
    
    try:
        import psutil
        import torch
        
        memory = psutil.virtual_memory()
        available_gb = memory.available / (1024**3)
        total_gb = memory.total / (1024**3)
        
        print("üìä –ê–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º—ã:")
        print(f"   –û–±—â–∞—è –ø–∞–º—è—Ç—å: {total_gb:.1f} –ì–ë")
        print(f"   –î–æ—Å—Ç—É–ø–Ω–∞—è –ø–∞–º—è—Ç—å: {available_gb:.1f} –ì–ë")
        print(f"   GPU: {'–î–∞' if torch.cuda.is_available() else '–ù–µ—Ç'}")
        
        print("\nüéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        
        if available_gb >= 8:
            print("   ‚úÖ –£ –≤–∞—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞–º—è—Ç–∏ –¥–ª—è –±–æ–ª—å—à–∏—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π")
            print("   ‚úÖ –ú–æ–∂–µ—Ç–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å 50k+ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ")
            print("   üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–≤–µ–ª–∏—á–∏—Ç—å CHUNK_SIZE –¥–æ 7000")
            
        elif available_gb >= 4:
            print("   ‚úÖ –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Å—Ä–µ–¥–Ω–∏—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π (–¥–æ 25k –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)")
            print("   üí° –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã")
            
        elif available_gb >= 2:
            print("   ‚ö†Ô∏è  –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –ø–∞–º—è—Ç—å - –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π")
            print("   üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–º–µ–Ω—å—à–∏—Ç—å CHUNK_SIZE –¥–æ 2000-3000")
            print("   üí° –ó–∞–∫—Ä–æ–π—Ç–µ –¥—Ä—É–≥–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–µ–π")
            
        else:
            print("   ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞–º—è—Ç–∏ –¥–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã")
            print("   üí° –ö—Ä–∏—Ç–∏—á–Ω–æ: –æ—Å–≤–æ–±–æ–¥–∏—Ç–µ –ø–∞–º—è—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –û–ó–£")
            print("   üí° –£–º–µ–Ω—å—à–∏—Ç–µ CHUNK_SIZE –¥–æ 1000")
        
        if torch.cuda.is_available():
            gpu_name = torch.cuda.get_device_name(0)
            gpu_memory = torch.cuda.get_device_properties(0).total_memory / (1024**3)
            
            print(f"\nüöÄ GPU —É—Å–∫–æ—Ä–µ–Ω–∏–µ:")
            print(f"   GPU: {gpu_name}")
            print(f"   –ü–∞–º—è—Ç—å GPU: {gpu_memory:.1f} –ì–ë")
            
            if "RTX" in gpu_name:
                print("   ‚úÖ –û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å! –û–∂–∏–¥–∞–π—Ç–µ 5-10x —É—Å–∫–æ—Ä–µ–Ω–∏–µ")
            elif "GTX" in gpu_name:
                print("   ‚úÖ –•–æ—Ä–æ—à–µ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ! –û–∂–∏–¥–∞–π—Ç–µ 3-5x —É—Å–∫–æ—Ä–µ–Ω–∏–µ")
            else:
                print("   ‚úÖ GPU —É—Å–∫–æ—Ä–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ")
                
        else:
            print(f"\nüíª CPU —Ä–µ–∂–∏–º:")
            print("   ‚ö†Ô∏è  –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—É–¥–µ—Ç –º–µ–¥–ª–µ–Ω–Ω–µ–µ")
            print("   üí° –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è NVIDIA GPU")
        
        print(f"\nüìÅ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∫–æ–ª–ª–µ–∫—Ü–∏–π:")
        if torch.cuda.is_available() and available_gb >= 6:
            print("   ‚Ä¢ –î–æ 10k –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ~10-15 –º–∏–Ω—É—Ç")
            print("   ‚Ä¢ –î–æ 25k –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ~30-45 –º–∏–Ω—É—Ç") 
            print("   ‚Ä¢ –î–æ 70k –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ~2-3 —á–∞—Å–∞")
        elif available_gb >= 4:
            print("   ‚Ä¢ –î–æ 5k –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ~15-20 –º–∏–Ω—É—Ç")
            print("   ‚Ä¢ –î–æ 15k –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ~1-1.5 —á–∞—Å–∞")
            print("   ‚Ä¢ –î–æ 30k –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ~3-4 —á–∞—Å–∞")
        else:
            print("   ‚Ä¢ –î–æ 3k –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ~20-30 –º–∏–Ω—É—Ç")
            print("   ‚Ä¢ –î–æ 8k –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ~1-2 —á–∞—Å–∞")
            print("   ‚Ä¢ –ë–æ–ª—å—à–µ 8k: —Ä–∞–∑–±–µ–π—Ç–µ –Ω–∞ —á–∞—Å—Ç–∏")
            
    except ImportError:
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ psutil –∏ torch –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏."""
    print("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã Image Search Application")
    print("–≠—Ç–∞ —É—Ç–∏–ª–∏—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã –∫ —Ä–∞–±–æ—Ç–µ\n")
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
    check_system_info()
    check_python_environment()
    check_memory()
    check_gpu()
    check_required_packages()
    check_application_files()
    check_performance_settings()
    performance_recommendations()
    
    # –ò—Ç–æ–≥–æ–≤–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ
    print_header("–ò–¢–û–ì–û–í–û–ï –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï")
    
    # –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    issues = []
    
    try:
        import torch, torchvision, sentence_transformers, PIL, numpy, psutil
        print("‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞–∫–µ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    except ImportError as e:
        issues.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞–∫–µ—Ç—ã: {e}")
    
    if not Path('main.py').exists():
        issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç main.py")
    
    try:
        import psutil
        if psutil.virtual_memory().available < 1024**3:  # < 1GB
            issues.append("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –º–∞–ª–æ –ø–∞–º—è—Ç–∏")
    except:
        pass
    
    if not issues:
        print("üéâ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï!")
        print("\n–î–ª—è –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
        print("   ‚Ä¢ start_app.bat (–µ—Å–ª–∏ —Å–æ–∑–¥–∞–Ω —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–æ–º)")
        print("   ‚Ä¢ python main.py")
        
        try:
            import torch
            if torch.cuda.is_available():
                print("\nüöÄ GPU —É—Å–∫–æ—Ä–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ - –æ–∂–∏–¥–∞–π—Ç–µ –≤—ã—Å–æ–∫—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å!")
            else:
                print("\nüíª –†–∞–±–æ—Ç–∞ –≤ CPU —Ä–µ–∂–∏–º–µ - –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è")
        except:
            pass
            
    else:
        print("‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´:")
        for issue in issues:
            print(f"   ‚Ä¢ {issue}")
        print("\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å install.bat –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    
    print(f"\n{'='*60}")
    input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")

if __name__ == "__main__":
    main()
